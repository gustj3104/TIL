package loop;

public class For2 {
    public static void main(String[] args) {
        int sum = 0;
        int endNum = 3;

        for (int i = 1; i <= endNum; i++) {
            sum = sum +i;
            System.out.println("i= " + i + " sum= " + sum);
        }

        //for문이 끝나는 순간 i 변수는 사용할 수 없음(for문 안에서만 사용 가능)
    }
}
/*
for(;;){
    (실행 코드)
}

이 for문은 밑의 while 문과 동일함.
while(true){
    (실행 코드)
}


[for 문]
장점
- 초기화, 조건 체크, 반복 후의 작업을 한 줄에서 처리할 수 있어 편리함.
- 정해진 횟수만큼의 반복을 수행할 때 사용하기 적합함.
- 루프 변수의 범위가 for 루프 블록에 제한되므로, 다른 곳에서 이 변수를 실수로 변경할 가능성이 적음.

단점
- 루프의 조건이 루프 내부에서 변경되는 경우, for 루프는 관리하기 어려움.
- 복잡한 조건을 가진 반복문을 작성하기에는 while문이 더 적합할 수 있음.

[while 문]
장점
- 루프의 조건이 내부에서 변경되는 경우, while 루프는 이를 관리하기 쉬움.
- for 루프보다 더 복잡한 조건과 시나리오에 적합함.
- 조건이 충족되는 동안 계속해서 루프를 실행하며, 종료 시점을 명확하게 알 수 없는 경우에 유용함.

단점
- 초기화, 조건 체크, 반복 후의 작업이 분산되어 있어 코드를 이해하거나 작성하기 어려울 수 있음.
- 루프 변수가 while 블록 바깥에서도 접근 가능하므로, 이 변수를 실수로 변경하는 상황이 발생할 수 있음. (break로 조정하는 게 편리함)

--> 정해진 횟수만큼 반복을 수행해야 하면 for문 // 그렇지 않으면 while문

 */